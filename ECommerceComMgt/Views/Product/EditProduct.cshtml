@model DataAccess.ViewModel.AddProductDetailsViewModel

@{
    Layout = "~/Views/Shared/_Main.cshtml";
}

<div class="content">
    @using (Html.BeginForm("EditProduct", "Product", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Brand, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.Brand, new { htmlAttributes = new { @class = "form-control" } })
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Category, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.Category, new { htmlAttributes = new { @class = "form-control" } })
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Color, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.Color, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Color, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Storage, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.Storage, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Storage, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Processor, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.Processor, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Processor, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Memory, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.Memory, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Memory, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Display, htmlAttributes: new { @class = "control-label" })
            @Html.EditorFor(model => model.Display, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Display, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PhotoPath, htmlAttributes: new { @class = "control-label" })
            @Html.TextBoxFor(m => m.PhotoPath, new { type = "file" })
            @Html.ValidationMessageFor(model => model.PhotoPath, "", new { @class = "text-danger" })
        </div>
        @Html.HiddenFor(m => m.ProductId)
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>

    }
</div>
<div>
    @Html.ActionLink("Back to List", "Index")
</div>

